#+Title: Hodgkin and Huxley Model of the Action Potential
#+Author: Britt Anderson
#+Date: Winter 2022 (Psych420/792)
#+options: toc:nil
* Hodgkin Huxley Model (HHM) of the Neuron
  :PROPERTIES:
  :CUSTOM_ID: hodgkin-huxley-model-of-the-neuron
  :END:

* Background
Hodgkin and Huxley, the people as well as their model, provide a nice example for how to structure one's education to do this sort of work, as well as providing an exemplary example of doing the work.

One of the lessons is that you need to train broadly. You may not understand in the beginning what the problem is. You will need to be prepared for it to appear, and when it does to be able to attack it. For Hodgkin and Huxley this meant training in both the physical and non-physical sciences. Each emphasized a different side of that divide, but both made sure they could converse across the divide. If you want to apply computational tools to social science problems then you will need to make sure your course work and your practical skills bridge that divide too.

** Biographical Sources
The Nobel Prize organization keeps biographies of all recipients ([[https://www.nobelprize.org/prizes/medicine/1963/hodgkin/biographical/][Hodgkin]], [[https://www.nobelprize.org/prizes/medicine/1963/huxley/biographical/][Huxley]]).

This [[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3424716/pdf/tjp0590-2571.pdf][article (pdf)]] is a nice summary of the work. You might look for how long it took Huxley to calculate his simulation of one action potential numerically using the method, basically, that we will be using, and compare it to how long it takes you.

** Model Description (detailed)
   Gersnter's [[https://lcnwww.epfl.ch/gerstner/SPNM/node14.html#table-HH1][book's chapter]] on the HHM goes into more detail than I do. If you have problems getting things to work, or just want a more detailed mathematical explanation this is an excellent resource. 
  
* The HHM

** Some introductory reminders and admonitions

The current going in to the cell is what we inject. The current coming
out is the sum of the capacitance (due to the lipid bilayer), and the
resistance (due to the ion channels). This is *Kirchoff's* rule.

Recall that in the Integrate and Fire model we lumped all our ionic
events together into one term:

$$\tau \frac{dV(t)}{dt} = -V(t) + R~I(t)$$

The HHM is basically the same except we have a resistance /for
each ion channel/ (ask yourself,before reading the next paragraph)  what those ions are or at least how
many terms you will need). The rule for currents in parallel is to
apply Kirchoff's and Ohm's laws realizing that they all experience the
same voltage, thus the currents sum.

But in the HHM we treat these different ionic
components with their own terms to capture the difference between the
Sodium (Na), Potassium (K), and negative anions (still lumped as "leak"
l).

$$\sum_i I_R(t) = \bar{g}_{Na} m^3 h (V(t) - E_{Na}) + \bar{g}_{K} n^4 (V(t) - E_{K}) + \bar{g}_{L} (V(t) - E_{L})$$

** Putting it together The HHM
$$I_{tot} = I_r + I_C$$

By the same logic as for the integrate and fire $I_C = c~\frac{dV}{dt}$.

$$I_{tot} = \bar{g}_{Na} m^3 h (V(t) - E_{Na}) + \bar{g}_{K} n^4 (V(t) - E_{K}) + \bar{g}_{L} (V(t) - E_{L}) + c~\frac{dV}{dt}$$

Rearrange to get the $\frac{dV}{dt}$ on a side by itself.

\begin{equation}
\label{eq:HHM}
c~\frac{dV}{dt} = I_{tot} - (\bar{g}_{Na} m^3 h (V(t) - E_{Na}) + \bar{g}_{K} n^4 (V(t) - E_{K}) + \bar{g}_{L} (V(t) - E_{L}))
\end{equation}

*** Test your understanding

You cannot program what you don't understand. Sometimes people think that the act of programming will bring them understanding. It doesn't. It may provoke understanding. It may be that you did not realize that you did not understand something until you try to code it. That can be helpful. But if you are fuzzy on the basics coding will not grant you insight. Simulating models with code is most useful for helping you see the consequences of something. If you understand the above model, what its components stand for and represent, then you might wonder what would happen if ...? What would happen if there were five /n/ channel components? And so on. It is not that you do not understand what /n/ represents, but that you are unable to do the math in your head. That is where the computer helps: making concrete the consequences of your well understood system.

So, in that light, and before you start coding, ask yourself,

1. What are the $\bar{g}_*$ terms?
2. What are the $E_{*}$ terms?
3. What do m,n, and h represent?
4. Where did these equations come from?
   
** It's Differential Equations All the Way Down
Although the HHM uses just the same mathematics as the I&F model, and we will use the same Euler's method to step forward and calculate model terms that evolve over time, this model is more complex in two ways. First, it has multiple derivatives and derivatives at multiple levels. Each of the /m/, /n/, and /h/ terms are also changing and regulated by a differential equation. They are dependent on voltage. For example, $\dot{m} = \alpha_m (V)(1 - m) - \beta_m (V) m$ [fn:1]. 

*** More food for thought
1. Each of the m,n, and h terms have their own equation of exactly the
   same form, but with their unique alphas and betas (that is what the
   subscript means).
2. What does the V in parentheses mean?
3. When they were finally sequenced (decades later), what do you think
   was the number of sub-units that the sodium and potassium channels
   were found to have?

** Online Practice
If possible it can be good to play with the data you wish to model before you get to writing equations or writing code. Since the HHM has been around for awhile you can find versions of the code that you can play with to gain familiarity about the general behavior and the important variables. That can help you in the debugging process. You may see that your code is mis-behaving in a way you understand from your manipulating of others' models. And thus you can better figure out where your code needs tweaking. Of course there will not always be that opportunity, but when it is available use it.

Here our goal is to learn to understand a model, and to learn how to write code to implement it, so there is no harm in looking at others' code as long as you don't just slavishly copy it. 

*** An online version of the HHM coded in javascript [fn:2]
[[https://ackmanlab.com/2017-06-30-hodgkin-huxley-model.html][Online HH Model in Javascript]]

** Getting Started
*** How do you know where to start? Motivating Questions?

1. If you allow $t \rightarrow \infty \mbox{, then } \frac{dV}{dt}=$?
2. You assume that it goes to zero; that is, you reach steady state.
   Then you can solve for some of the constants.
3. Where do the constants come from?
4. They come from experiments, and you use what you are given.
5. Assume the following constants - they are set to assume a resting
   potential of zero (instead of what and why doesn't this matter)?
6. These constants also work out to enforce a capacitance of 1

*** Constants
    :PROPERTIES:
    :CUSTOM_ID: constants
    :END:
| Constant | Value |
|----------+-------|
| ena      | 115   |
| gna      | 120   |
| ek       | -12   |
| gk       | 36    |
| el       | 10.6  |
| gl       | 0.3   |

**WARNING** These constants are adjusted to make the resting potential 0 and the capacitance 1.0. If you want your model to have a biological resting potential you will need to adjust these values, but when you think about it the scale is rather arbitrary. What does water freeze at 0 or -32? Well it depends on the scale: centigrade or fahrenheit. Same for neurons. Why not use a scale that makes the math simpler. Focus on the relative behavior not some absolute, and rather arbitrary, numbers?

** Alpha and Beta Formulas
   :PROPERTIES:
   :CUSTOM_ID: alpha-and-beta-formulas
   :END:

$\alpha_{n}(V_{m})={\frac {0.01(10-V_{m})}{\exp {\big (}{\frac{10-V_{m}}{10}}{\big )}-1}}$

$\alpha_{m}(V_{m})={\frac {0.1(25-V_{m})}{\exp {\big (}{\frac {25-V_{m}}{10}}{\big )}-1}}$

$\alpha _{h}(V_{m})=0.07\exp {\bigg (}{\frac {-V_{m}}{20}}{\bigg )}$

$\beta _{n}(V_{m})=0.125\exp {\bigg (}{\frac {-V_{m}}{80}}{\bigg )}$

$\beta _{m}(V_{m})=4\exp {\bigg (}{\frac {-V_{m}}{18}}{\bigg )}$

$\beta_{h}(V_{m})={\frac {1}{\exp {\big (}{\frac {30-V_{m}}{10}}{\big)}+1}}$

* Coding the HHM
Again, I am doing this in common lisp so that you can see actual working code that you can adapt to a different language.

** Imports and Set-up
Every language will have a bit of boiler plate that you need to do to get things set up. You need to specify the tools you are using, and what, if you are writing a library, will be available for your users.

#+begin_src lisp -n :exports code :results silent
  (eval-when (:compile-toplevel :load-toplevel :execute)
    (ql:quickload "eazy-gnuplot" :silent t))
  
  (load #P"/home/britt/gitRepos/compNeuroIntro420/notebooks/DE_Spikes/wk3_iandf/test.lisp")

  (setq *read-default-float-format* 'double-float)
  
  (DEFPACKAGE #:hodgkin-huxley
    (:nicknames "HH") (:use #:cl)
    (:import-from "EAZY-GNUPLOT"
		  "WITH-PLOTS"
		  "PLOT"
		  "GP-SETUP")
    (:import-from "MYTEST"
		  "BETWEEN"
		  "UPDATE"))
  
  (in-package :hh)
#+end_src

*** Explanations (optional)
Unless you are thinking of trying lisp most of this is un-necessary to know, at least the specifics. Generally, there will be other set-up for other languages, but if you want more details

Lines 1 and 2 describe some setup to make the compiling always compile everything, and to make the plotting library I am using available for later in my code.

Line 4 shows that I decided to re-use some lisp functions that I wrote for the I&F model, which I left in a badly named file ~test.lisp~. The ~#P~ tells lisp this is a file path and not just a string of characters.

Line 6. Programming languages can have "types". Sometimes those are formal types and other times informal and more or less decided dynamically. Numbers in particular are tricky. 1 (an integer) is usually not the same as 1.0 (a float) or 1.0 (a double). You may need to specify what your programming language should consider the default number type so you can type 1.0 and know what your computer program compiler (or interpreter) will infer is the type of your number.

Lines 8 - 16 are me defining my package. I say what its name will be and a shorter version I can type as a nickname. I say what functions I want from the packages I am importing to be available for use in this new package.

Lastly on line 18 I say that I am now working in the namespace of my new package.

** Classes and Objects
Many programming languages (but not all) will have a notion of an object. Your intuition can be of a car. A car has /attributes/ (blue, sedan) that are its color and style. Then it has methods, things it can do, (go forward, invoke four wheel drive). Python is an object based language and object oriented programming is common in Python. An object /encapsulates/ the methods and attributes together. Many programming languages refer to types of objects as ~classes~. Then when you want a particular car you would create an instance of the car class. To make that particular car run you would invoke the ~go-forward~ method of your car. You could also "paint" it by changing the attribute of mycar.color = "red".

Classes are a bit different in lisp. The methods are not part of the class definition. Here I specify what all I want as attributes of my neuron for simulation and then a method for using it.
#+begin_src lisp +n :exports code :results silent
(defclass neuron-sim ()
  ((dt
   :initarg :dt
   :initform 0.01)
   (max-t
    :initarg :max-t
    :initform 300)
   (init-t
    :initarg :init-t
    :initform 0.0)
   (start-time
    :initarg :start-time
    :initform 10.0)
   (stop-time
    :initarg :stop-time
    :initform 150.0)
   (cap
    :initarg :cap
    :initform 1.0)
   (res
    :initarg :res
    :initform 2.0)
   (threshold
    :initarg :threshold
    :initform 3.0)
   (spike-display
    :initarg :spike-display
    :initform 8.0)
   (init-v
    :initarg :init-v
    :initform 0.0)
   (injection-current
    :initarg :injection-current
    :initform 50.0)
   (voltage)
   (injection-time)
   (tau)))

(defmethod initialize-instance :after ((neuron neuron-sim) &key)
  (let ((init-v (slot-value neuron 'init-v))
	(start-time (slot-value neuron 'start-time))
	(stop-time  (slot-value neuron 'stop-time))
	(res    (slot-value neuron 'res))
	(cap    (slot-value neuron 'cap)))
    (setf (slot-value neuron 'voltage) init-v)
    (setf (slot-value neuron 'injection-time) (cons start-time stop-time))
    (setf (slot-value neuron 'tau) (* res cap))))

#+End_src

I won't go into details here. Ask me if you have questions. The important general point is that I am setting up all the constants and parameters that I think I will need for a general neuron that I might use in a simulation as defaults for when I create it. I can of course change them (like I did for car color), but this gives me one location where I can establish defaults.

One nice use of classes is /inheritance/. I can create a general object type that I then make more specific for a more specific use case. Here we don't just want a general neuron. We want one for our HHM. Such a neuron can inherit most of what it needs from the general neuron class, but we will then give it some additional attributes. That is what happens in the next source block. 

#+begin_src lisp +n :results silent :exports code
(defclass neuron-hh (neuron-sim)
  ((ena
    :initarg :ena
    :type real
    :initform 115.0
    :accessor ena
    :documentation "Reversal Potential for Sodium")
   (gna
    :initarg :gna
    :type real
    :initform 120.0
    :accessor gna
    :documentation "Sodium Conductance")
   (ek
    :initarg :ek
    :type real
    :initform -12.0
    :accessor ek
    :documentation "Reversal Potential for Potassium")
   (gk
    :initarg :gk
    :type real
    :initform 36.0
    :accessor gk
    :documentation "Potassium Conductance")
   (el
    :initarg :el
    :type real
    :initform 10.6
    :accessor el
    :documentation "Reveral Leak Potential"
    )
   (gl
    :initarg :gl
    :initform 0.30
    :type real
    :accessor gl
    :documentation "Leak Conductance")))
#+end_src

** Helper Functions Alpha and Beta
There are a lot of different functions to keep track of. One way to start is by being very explicit. That is what I do here. If you look though you will see that all of these are variations of a basic formulation. Another approach would be to write one generic function that takes in values and generates a new function with the specific parameter values set. Then you would create each of the alpha and beta functions from that generic function. This is sometimes called a _closure_. However, there are some slight variations of the forms here and only six functions so I found it easier to write each one explicitly.

#+begin_src lisp +n :results silent :exports code
(defun alpha-n (volt)
  (/ (- 0.1 (* 0.01 volt)) (- (exp (- 1 (* 0.1 volt))) 1.0)))

(defun alpha-m (volt)
  (/ (- 2.5 (* 0.1 volt)) (- (exp (- 2.5 (* 0.1 volt))) 1.0)))

(defun alpha-h (volt)
  (* 0.07 (exp (/ (* -1.0 volt) 20.0))))

(defun beta-n (volt)
  (* 0.125 (exp (/ (* -1.0 volt) 80.0))))

(defun beta-m (volt)
  (* 4.0 (exp (/ (* -1.0 volt) 18.0))))

(defun beta-h (volt)
  (/ 1.0 (+ (exp (- 3.0 (* 0.1 volt))) 1.0)))
#+end_src

#+Caption: m, n, and h derivative equations
#+begin_src lisp +n :results silent :exports code
(defun m-dot (volt m)
  (- (* (alpha-m volt) (- 1 m)) (* (beta-m volt) m)))

(defun n-dot (volt n)
  (- (* (alpha-n volt) (- 1 n)) (* (beta-n volt) n)))

(defun h-dot (volt h)
  (- (* (alpha-h volt) (- 1 h)) (* (beta-h volt) h)))

(defun m-infinity (volt)
  (/ (alpha-m volt) (+ (alpha-m volt) (beta-m volt))))

(defun n-infinity (volt)
  (/ (alpha-n volt) (+ (alpha-n volt) (beta-n volt))))

(defun h-infinity (volt)
  (/ (alpha-h volt) (+ (alpha-h volt) (beta-h volt))))
#+end_src


** Updating the Voltage
Look back at the $\frac{dv}{dt}$ formula for the I&F model and try to see the similarities. Although this function looks more complex it is still the basic Euler Method we used from the I&F model. In fact, if you look where the ~update~ function comes from you will see it is literally the one from the I&F model. I =imported= it.

A reason for the complexity is also that there are just a lot more parameters to set and a more complicated formula for the derivative. Some of this comes from using the lisp object system (that is why I have to speak of "slots"). The updating formula is also more complex, because I need to update several different derivatives all in a particular order.


#+begin_src lisp +n :results silent :exports code

(defun dvdt (voltage-now curr-in hh-m hh-n hh-h neuron-parameters)
  (with-slots (ena gna ek gk el gl) neuron-parameters
    (- curr-in (+ (* gna (expt hh-m 3.0) hh-h (- voltage-now ena))
	  (* gk (expt hh-n 4.0) (- voltage-now ek))
	  (* gl (- voltage-now el))))))


(defun run-hh-sim (nps)
  (with-slots 
	(dt max-t init-v injection-current injection-time) nps
	(do*
	 ((ts)
	  (vs)
	  (currs)
	  (ms)
	  (ns)
	  (hs)
	  (sim-time 0.0 (+ sim-time dt))
	  (inj-cur 0.0
		   (between sim-time
			    :lower (car injection-time)
			    :upper (cdr injection-time)
			    :if-true injection-current))
	  (hh-m-sim (m-infinity init-v) (update hh-m-sim (m-dot voltage hh-m-sim) dt ))
	  (hh-n-sim (n-infinity init-v) (update hh-n-sim (n-dot voltage hh-n-sim) dt ))
	  (hh-h-sim (h-infinity init-v) (update hh-h-sim (h-dot voltage hh-h-sim) dt ))
	  (voltage init-v
		   (update voltage
			   (dvdt voltage inj-cur hh-m-sim hh-n-sim hh-h-sim nps) dt)))
	 ((> sim-time max-t) (list (nreverse ts) (nreverse currs) (nreverse vs) 
				   (nreverse ms) (nreverse ns) (nreverse hs)))
	  (push sim-time ts)
	  (push voltage vs)
	  (push inj-cur currs)
	  (push hh-m-sim ms)
	  (push hh-n-sim ns)
	  (push hh-h-sim hs)
	  )))
#+end_src

** Plotting, again
The same logic applies. The easiest way to tell whether we got it right or wrong is to write a function that will let us visualize our long, very long, list of numbers.

#+begin_src lisp +n :results silent :exports code
(defun handh-plot (output plot-data)
  (with-plots (*standard-output* :debug nil)
    (gp-setup :output output :terminal :png
	      :key '())
    (plot
     (lambda ()
       (loop for times in (first plot-data)
	     for volts in (third plot-data)
	     do (format t "~&~a ~a" times volts)))
     :with '(:lines :title "Voltage" :lc "black" :lw 2))
    (plot
     (lambda ()
       (loop for times in (first plot-data)
	     for currs in (second plot-data)
	     do (format t "~&~a ~a" times currs)))
     :with '(:lines :lw 2 :lc "red" :title "Current"))
    output))
#+end_src

** And finally,

#+begin_src lisp +n :exports code graphics :results replace graphics file "handh.png" 
    (defvar sim-dat (run-hh-sim (make-instance 'neuron-hh :dt 0.02 :max-t 450.0d0
							  :start-time 50.0d0 :stop-time 300.0d0
							  :injection-current 7.0d0)))
    (handh-plot "handh.png" sim-dat)
#+end_src

#+RESULTS:
#+Caption: Hodgkin-Huxley Spiking to Constant Current Input
[[file:handh.png]]

* Footnotes
[fn:2] Javascript is a common programming language for the web. It has a reputation of being ugly, and a bit of a hack, but there is a lot of software written in this language and it is certainly a language that one can get a job writing. The library has a nice [[https://eloquentjavascript.net/][book]] availble for on-line reading that teaches this language. You can also use your browser as an IDE for javascript. Look for the "developer tools" or similar in your browser. On Firefox if you click the button to show all the options and preferences (the three lines that suggests "menu") you will see a button for "more tools". From there you can look at the web developer tools. You will be able to see the raw code for your web page and the javascript functions that are running. You can also enter your own code into the "console" tab and run it. Try typing alert("hi") in the console and clicking run. Amazing, no?

[fn:1] Do you remember what the "dot" rotation is meant to represent? Do you regard its use here as correct? 
