* An Introduction to Differential Equations
** Why are Differential Equations an important technique for computational modelling in psychology and neuroscience?
*** The Action Potential                                      :classExercise:
    1. 10 minutes to brush up on what an action potential is.
    2. Then be able to draw one on the board and explain,
       1. What are the axes?
       2. What ion causes the upward deflection?
       3. What causes the repolarization?
       4. Who discovered the action potential?
       5. Who won the Nobel Prize for characterizing the ionic events
          of the action potential experimentally and building a
          mathematical model?
    3. Did you draw this?
       [[file:../../../images/Action_potential_basic_shape.pdf]]
       https://commons.wikimedia.org/w/index.php?curid=44114666

*** Why is the action potential relevant for a discussion of DE's in modelling?
    The computational model of the action potential is a partial differential equation and action potentials, "spikes", are often taken to be the information processing unit of the nervous system.

    DE's are the way we capture dynamics, how things change over time. If you think some neural or cognitive process that you are interested in is changing over time, then you are interested in dynamics and the first approach you should think of for modelling it is a differential equation.

** Notation
Concise summaries of things that would take too long to write out in detail. Mathematical notation is just a technical emoji. You probably know the "math" they represent; you just don't know the abbreviation that is being used.

Write out in long hand (or type on your computer) what is meant by the
following:

  $$\sum_{\forall x \in \left\{ 1 , 2 , 3 \right \}} x ~=~ 6$$
*** Multiple Ways to Say the Same Thing

$\frac{dy}{dx}$

$\dot{x}$

$x'$

$f'(x)$

Moral: Don't let weird symbols put you off trying to understand. Plenty of musical people can't understand a score. Just because you don't understand a mathematical score does not mean you don't understand the mathematics.

** Differential Equations: General Facts
*** What is a differential equation?
    Give me an answer that uses *no* equations. Just words. 
*** What is a derivative?
    Give me an answer that uses *no* equations. Just words. 
*** Derivatives are Slopes
1. What is a slope?
2. When in doubt return to definition.
3. Deriving the definition of a derivative.
4. What is the definition of a derivative?
**** Digression: Use your computer as a tool for exploration
#+Caption: A Jupyter Python example
#+begin_example
1. Launch a new notebook
2. Create a =code= cell
3. Use the *magic* for python plotting
4. =import= the needed libraries (do you know what a library is?)
5. create a =list= of numbers
6. create a second =list= of different numbers
7. plot them.
#+end_example


#+BEGIN_SRC python :session *de-intro* :exports both :results graphics file :file "./images/p_p.png"
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
xs = [1,2,3,4,5]
ys = [2,4,6,8,10]
plt.plot(xs,ys)
plt.savefig("./images/p_p.png")
#+END_SRC

#+RESULTS:
[[file:./images/p_p.png]]



**** What is the Slope of a Curve?
#+Name: Loading Some Lisp Packages
#+Caption: Effective use of the computer as a tool means you should always be learning and trying new things. The be the next new thing, or it may be some great, old, forgotten thing. I want to learn Lisp. I am restyling some of the older examples as self-exercises.
#+begin_src lisp :session *plotting* :results none
  (ql:quickload '(:eazy-gnuplot :clml.statistics :clml.utility))
  (use-package :eazy-gnuplot) 
#+end_src

#+begin_src lisp :session *plotting* :exports both :results graphics file :file "./images/s-p.png" 
  (defun scatter-plot (output)
    (let ((point-max 100)
	  (point-type 7)
	  (point-color "red")
	  (step-size 1)
	  (slope 0.4))
      (with-plots (*standard-output* :debug nil)
	(gp-setup :terminal '(pngcairo) :output output)
	(plot
	 (lambda ()
	   (loop for p from 1 upto point-max by step-size
		   do (format t "~&~a ~a" p (+ (- p step-size) (* (- p step-size) slope)))))
	 :with `(:lines :lc :rgb ,point-color)))))
  (scatter-plot "./images/s-p.png")
#+end_src

#+Name: Lisp Eazy-plot Line
#+Caption: A line drawn with gnuplot called from common-lisp library "eazy-plot". Note the programmatic use of plot commands. Much harder to get started. Much greater control later on. 
#+RESULTS:
[[file:./images/s-p.png]]

**** Thinking About Slopes
1. Describe in words a reallife scenario that matches the process being
   plotted above.
2. How would you define a slope for a curve like this?
**** How do you find the slope of a curve?
#+BEGIN_SRC python :session *de-intro* :exports both :results graphics file :file "./images/curve-slope.png"
  from matplotlib import pyplot
  import matplotlib.pyplot as plt
  import numpy as np
  a = np.linspace(-4,6,num=120)
  b = [x**3 for x in a];#list comprehension
  plt.plot(a,b)
  plt.plot([2,2],[-100,8], 'k-',lw=2)
  plt.plot([-4,2],[8,8], 'k-',lw=2)
  plt.plot([4,4],[64,-100], 'k-',lw=2)
  plt.plot([-4,6],[-64,56], 'r-',lw=2)
  plt.plot([-4,4],[64,64], 'k-',lw=2)
  plt.plot([4,6],[64,64], 'k--',lw=2)
  plt.plot([2,4],[8,64], 'k-',lw=2)
  plt.savefig("./images/curve-slope.png")
#+END_SRC

#+Name: Slope of a Curve
#+Caption: The slope of a curve illustrated. In this example I use a series of python commands and the python numpy library. There are many ways to get things done. Find one that works for you, and try to think about how to learn something that will serve you long into the future, and not just the tool that meets immediate needs. 
#+RESULTS:
[[file:./images/curve-slope.png]]





**** Derivatives are Instantaneous Slopes

You pick two points that are "close enough" and you get an answer that
is "close enough." If your answer isn't "close enough" then you move
your points closer, until /in the limit/ there is an infinitesimal
distance between them.

Definition:

$$\frac{dy}{dx} = \lim_{h \to 0}\frac{f(x + h) - f(x)}{(x + h) - x}$$

***** Digression: Writing Math in Documents
The current standard tool for nicely typeset math is LaTeX. You can use this in jupyter notebooks and even some in [[https://support.microsoft.com/en-us/office/linear-format-equations-using-unicodemath-and-latex-in-word-2e00618d-b1fd-49d8-8cb4-8d17f25754f8][Word]]. However, the most powerful way is just to write the document as a simple text file with the .tex ending and use TeX post-processors. This is easiest in Linux, but isn't too hard for both Windows and OSX. Here I use LaTeX fragments in side an "org" file compiled by emacs using other programs on my computer.

[[https://faculty.math.illinois.edu/~hildebr/tex/latex-start.html][Some Resources]]

**** Using Derivatives to Solve Problems With a Computer

***** What is a square root?

What is the *solution* to $y=x^2$ if I tell you what $y$ is?

Thinking about how to solve it. Some discussion questions:
1. Come up with a guess (e.g. in your head what would you guess is the
   square root of 128?).
2. Write a formula that would allow you to compute the error (or how far
   off you were).
3. How much should you adjust your guess to get closer to the correct
   answer?
4. What is the derivative of $x^2$? Does it have a place in your
   formula?
5. Give a reason graphically why you ought to be able to use this
   derivative to help improve your guess.
6. What happens to the sign of the "adjustment" when our guesses go from
   giving us too big an answer to too little an answer.
**** Analytical Solutions
     Let software be your guide.
     1. [[https://www.sympy.org/en/index.html][Sympy]]
     2. [[https://www.cfm.brown.edu/people/dobrush/am33/SymPy/index.html][Sympy for applied DEs]]
     3. [[https://cran.r-project.org/web/packages/Deriv/Deriv.pdf][R for Derivatives]]

#+Name: Derivatives with a Computer Algebra System: Maxima
#+Caption: What is the derivative of x squared?
#+begin_src maxima :results raw
  f(x) := x^2;
  tex(diff (f(x), x));
#+end_src

#+RESULTS: Derivatives with a Computer Algebra System: Maxima
$$2\,x$$
$$2\,x$$

**** Working Through an Example

***** When in doubt, guess
- How much is your guess off?

 $\mbox{Error} = \mbox{(my guess)}^2 - \mbox{128}$

- How much does the error change when the guess changes?
  This is a derivative. A *rate of change*.

  $\frac{\Delta~\mbox{Error}}{\Delta~\mbox{Guess}} = \frac{\mbox{Error(Guess1) - Error(Guess0)}}{\mbox{Guess1} - \mbox{Guess0}}$

  As the guess gets very small this will approach the definition of the derivative.

We have a function for how to compute the result of our guess and we can get the derivative of that either by hand or by using a computer algebra system.

$$\frac{\mbox{dError}}{\mbox{dGuess}} = \frac{\mbox{f(Guess1)} - \mbox{goal} - \mbox{f(Guess0)} + \mbox{goal}}{\mbox{Guess1} - \mbox{Guess0}}$$

  
- Using these relations can we come up with a formula for how much we need to adjust our guess based on how big the error was?
   
  
#+BEGIN_SRC python :session *de-intro* :exports both :results graphics file :file "./images/sqrt55.png"
  #Error Plot
  #What is square root of 55?
  plotData = [(x**2-55,x) for x in np.arange(5.0,8.5,0.01)]
  plt.clf()
  plt.plot([y[1] for y in plotData],[x[0] for x in plotData],)
  plt.plot([5.0,8.5],[0,0],'r-')
  plt.plot([np.sqrt(55),np.sqrt(55)],[12,-30],'r-')
  plt.plot([5.0,8.0],[-30,0],'k--')
  plt.plot([8.0,8.0],[-5,15],'g--')
  plt.plot([8.0,8.0-(9.0/16)] , [9.0,0.0],'b')
  plt.savefig("./images/sqrt55.png")
#+END_SRC

#+RESULTS:
[[file:./images/sqrt55.png]]


#+BEGIN_SRC python :session *de-intro* :exports both :results graphics file :file "./images/sqrt-more.png"
  plotData = [(x**2-55,x) for x in np.arange(7.3,7.6,0.01)]
  plt.clf()
  plt.plot([y[1] for y in plotData],[x[0] for x in plotData],)
  plt.plot([7.0,7.5],[0,0],'r-')
  plt.plot([np.sqrt(55),np.sqrt(55)],[3,-3],'r-')
  xs = [np.sqrt(55)-1/4,np.sqrt(55)+1/4]
  plt.plot(xs , [16*x-119 for x in xs],'b')
  plt.savefig("./images/sqrt-more.png")
#+END_SRC

#+RESULTS:
[[file:./images/sqrt-more.png]]


**** Finding Cube Roots :class_exercise:
     :PROPERTIES:
     :CUSTOM_ID: finding-cube-roots
     :END:

1. What is a /cube root/?

2. What is the derivative of $x^3$?

3. Find it with a computer algebra system *even if you know how to do it by hand.*
   A simple way to make sure you are on the right track with a new programming tool is to do something in code that you can do in your head or on paper to make sure t

4. Write two Python Functions: one to =return= the cube of a number, and
   one to =return= the derivative when evaluated at a particular value
   of =x=.

#+begin_src maxima :results raw
  f(x) := x^3;
  df:diff(f(x), x);
  tex(df);
  newline();
  print("The derivative of x^3 at 3 is: ",ev(df,x=3));
  #+end_src

  #+RESULTS:
  $$3\,x^2$$
  The derivative of x^3 at 3 is:  27 
  $$3\,x^2$$
  The derivative of x^3 at 3 is:  27 

#+begin_src lisp :session *cube-root* :results silent
  (setq *read-default-float-format* 'DOUBLE-FLOAT)
  (defvar *goal* 128.0)
  (defvar *initial-guess* 5.0)
  (defun x-cubed (x) (* x x x))
  (defun diff-x-cubed (x) (* 3 x x))
#+end_src

#+begin_src lisp :session *cube-root* :results silent
  (defun get-step (guess &optional (goal *goal*)) (/ (- goal (x-cubed guess)) (diff-x-cubed guess)))
#+end_src

#+begin_src lisp :session *cube-root* :results silent
  (defun get-cube-root (goal initial-guess &optional (tolerance 0.001))
    (loop
      for error = (get-step initial-guess goal) then (get-step new-guess goal)
      for new-guess = (+ initial-guess error) then (+ error new-guess)
      while ( > (abs ( - (x-cubed new-guess) goal )) tolerance )
      do (format t "new-guess is ~,15f~%" new-guess)
      finally (return new-guess)))
#+end_src

#+begin_src lisp :session *cube-root* :exports both
  ;; let's try it out
  (get-cube-root 128 5.0)
#+end_src

#+RESULTS:
: 5.039684219366759

#+BEGIN_SRC python :session *de-intro* :eval never
  #What is the equation of a frictionless spring?

  #What is it you are plotting?

  def spring(inputs): #might need more than one input, might not
      #stuff here
      return();#something has to go in there

  def plot(inputs): #inputs just a place holder, you have to supply details
      #stuff here
      return(); #return something?

  def main():
      s = spring(1);#1's are just here to make this work without above inputs defined
      p = plot(1)
      quit = False
      if (not quit):
          q = input('Type y to quit, any other key to continue')
          if (q != 'y'):
              main()
              
  main()
#+END_SRC

** Part 2
   :PROPERTIES:
   :CUSTOM_ID: part-2
   :END:

Provide the code for the damped oscillator. It has the formula of

$$ \frac{d^2 s}{dt^2} = -P~s(t) - k~v(t) $$

This should really only require changing one line of your code for the
simple harmonic oscillator.

** Can I make a simple plot?

*** First we need a bunch of stuff


*** Now a basic example?
    [[https://guicho271828.github.io/eazy-gnuplot/][Here]] is a "cookbook".

    The examples make use of a local subdirectory called "images". Create it.

    The first cookbook example seems to use a function we don't need: ~png-from-file~. This is probably related to the cookbook being a jupyter notebook.


*** Scatter Plot Example
    # #+begin_src lisp :exports both :results graphics file :file "./images/scatter-plot.png" 
    # #+end_src

    # #+RESULTS:
    # [[file:./images/scatter-plot.png]]

