* An Introduction to Differential Equations

** Why are Differential Equations an important technique for computational modelling in psychology and neuroscience?

*** What is a differential equation?
    Give me an answer that uses *no* equations. Just words. 

*** What is a derivative?
    Give me an answer that uses *no* equations. Just words. 

*** The Action Potential                                      :classExercise:
    1. 10 minutes to brush up on what an action potential is.
    2. Then be able to draw one on the board and explain,
       1. What are the axes?
       2. What ion causes the upward deflection?
       3. What causes the repolarization?
       4. Who discovered the action potential?
       5. Who won the Nobel Prize for characterizing the ionic events
          of the action potential experimentally and building a
          mathematical model?
    3. Did you draw this?
       [[file:../../../images/Action_potential_basic_shape.svg]]
       https://commons.wikimedia.org/w/index.php?curid=44114666


*** Why is the action potential relevant for a discussion of DE's in modelling?
    The computational model of the action potential is a partial differential equation and action potentials, "spikes", are often taken to be the information processing unit of the nervous system.


   :PROPERTIES:
   :CUSTOM_ID: instructions
   :END:
We will work on this in class. Your goal is to write the code for a
spring using a differential equation to help you update your calculation
of position as a function of time. Here is a skeleton of what you will
need to get going.

#+BEGIN_SRC python
  #What inputs and "magics" do you need?

  #What is the equation of a frictionless spring?

  #What is it you are plotting?

  def spring(inputs): #might need more than one input, might not
      #stuff here
      return();#something has to go in there

  def plot(inputs): #inputs just a place holder, you have to supply details
      #stuff here
      return(); #return something?

  def main():
      s = spring(1);#1's are just here to make this work without above inputs defined
      p = plot(1)
      quit = False
      if (not quit):
          q = input('Type y to quit, any other key to continue')
          if (q != 'y'):
              main()
              
  main()
#+END_SRC

** Part 2
   :PROPERTIES:
   :CUSTOM_ID: part-2
   :END:

Provide the code for the damped oscillator. It has the formula of

$$ \frac{d^2 s}{dt^2} = -P~s(t) - k~v(t) $$

This should really only require changing one line of your code for the
simple harmonic oscillator.

** Can I make a simple plot?

*** First we need a bunch of stuff
    #+begin_src lisp
	   ;; will need some packages/systems I am sure.
	   ;; will try gnuplot -- need to install that package
	   ;; and eazy-gnuplot
      (ql:quickload '(:eazy-gnuplot :clml.statistics :clml.utility))
      (use-package :eazy-gnuplot) 
    #+end_src

    #+RESULTS:
    : T

*** Now a basic example?
    [[https://guicho271828.github.io/eazy-gnuplot/][Here]] is a "cookbook".

    The examples make use of a local subdirectory called "images". Create it.

    The first cookbook example seems to use a function we don't need: ~png-from-file~. This is probably related to the cookbook being a jupyter notebook.

    #+begin_src lisp :exports both :results graphics file :file "./images/function-plot.png" 
      (defun function-plot (output)
	(with-plots (*standard-output* :debug nil)
	  (gp-setup :terminal '(pngcairo) :output output)
	  (func-plot "[-5:5] (sin(1/x) - cos(x))*erfc(x)"))
	output)
      (function-plot "images/function-plot.png")
    #+end_src

    #+RESULTS:
    [[file:./images/function-plot.png]]

*** Scatter Plot Example
    #+begin_src lisp :exports both :results graphics file :file "./images/scatter-plot.png" 
      (defun scatter-plot (output)
	(let ((point-n 400)
	      (point-type 7)
	      (point-color "orange"))
	  (with-plots (*standard-output* :debug nil)
	    (gp-setup :terminal '(pngcairo) :output output)
	    (plot
	     (lambda ()
	       (loop for p in (map 'list (lambda (x y) (list x y))
				 (clml.statistics:rand-n
				  (clml.statistics:chi-square-distribution 100) point-n)
				 (clml.statistics:rand-n
				  (clml.statistics:chi-square-distribution 10) point-n))
		   do (format t "~&~{~a~^ ~}" p)))
	     :with `(:points :pt ,point-type :lc :rgb ,point-color)))
	output))
       (scatter-plot "./images/scatter-plot.png")
    #+end_src

    #+RESULTS:
    [[file:./images/scatter-plot.png]]

